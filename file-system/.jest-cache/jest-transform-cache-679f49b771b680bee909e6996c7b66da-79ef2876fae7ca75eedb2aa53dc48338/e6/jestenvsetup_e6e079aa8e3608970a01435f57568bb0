b7e4b80a8e60d1c8e69e6868f5f8baa0
// jest.env.setup.js
// Charge automatiquement le fichier .env.test pour les tests
const path = require('path');
const fs = require('fs');
// Fonction pour charger les variables d'environnement depuis .env.test
function loadTestEnv() {
    const envTestPath = path.join(__dirname, '.env.test');
    if (fs.existsSync(envTestPath)) {
        const envContent = fs.readFileSync(envTestPath, 'utf8');
        // Parser le fichier .env.test
        envContent.split('\n').forEach(line => {
            const trimmedLine = line.trim();
            // Ignorer les commentaires et lignes vides
            if (trimmedLine && !trimmedLine.startsWith('#')) {
                const [key, ...valueParts] = trimmedLine.split('=');
                if (key && valueParts.length > 0) {
                    const value = valueParts.join('=').trim();
                    process.env[key.trim()] = value;
                }
            }
        });
        console.log('✅ Loaded test environment variables from .env.test');
    }
    else {
        console.warn('⚠️ .env.test file not found, using default test environment');
    }
}
// Charger les variables d'environnement de test
loadTestEnv();
// S'assurer que NODE_ENV est défini
if (!process.env.NODE_ENV) {
    process.env.NODE_ENV = 'test';
}
// Configuration timezone pour tests déterministes
process.env.TZ = 'UTC';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL25pY29sYXNiZXJuYXJkL0Rlc2t0b3AvY29kZXJzLXdvcmtwbGFjZS9iYWNrZW5kL2ZpbGUtc3lzdGVtL2plc3QuZW52LnNldHVwLmpzIiwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQiw2REFBNkQ7QUFFN0QsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV6Qix1RUFBdUU7QUFDdkUsU0FBUyxXQUFXO0lBQ2xCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRXRELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1FBQy9CLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXhELDhCQUE4QjtRQUM5QixVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNwQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFaEMsMkNBQTJDO1lBQzNDLElBQUksV0FBVyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUNoRCxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsVUFBVSxDQUFDLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDcEQsSUFBSSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztvQkFDakMsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ2xDLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLG9EQUFvRCxDQUFDLENBQUM7SUFDcEUsQ0FBQztTQUFNLENBQUM7UUFDTixPQUFPLENBQUMsSUFBSSxDQUFDLDZEQUE2RCxDQUFDLENBQUM7SUFDOUUsQ0FBQztBQUNILENBQUM7QUFFRCxnREFBZ0Q7QUFDaEQsV0FBVyxFQUFFLENBQUM7QUFFZCxvQ0FBb0M7QUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO0FBQ2hDLENBQUM7QUFFRCxrREFBa0Q7QUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWNvbGFzYmVybmFyZC9EZXNrdG9wL2NvZGVycy13b3JrcGxhY2UvYmFja2VuZC9maWxlLXN5c3RlbS9qZXN0LmVudi5zZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqZXN0LmVudi5zZXR1cC5qc1xuLy8gQ2hhcmdlIGF1dG9tYXRpcXVlbWVudCBsZSBmaWNoaWVyIC5lbnYudGVzdCBwb3VyIGxlcyB0ZXN0c1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuXG4vLyBGb25jdGlvbiBwb3VyIGNoYXJnZXIgbGVzIHZhcmlhYmxlcyBkJ2Vudmlyb25uZW1lbnQgZGVwdWlzIC5lbnYudGVzdFxuZnVuY3Rpb24gbG9hZFRlc3RFbnYoKSB7XG4gIGNvbnN0IGVudlRlc3RQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy5lbnYudGVzdCcpO1xuICBcbiAgaWYgKGZzLmV4aXN0c1N5bmMoZW52VGVzdFBhdGgpKSB7XG4gICAgY29uc3QgZW52Q29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhlbnZUZXN0UGF0aCwgJ3V0ZjgnKTtcbiAgICBcbiAgICAvLyBQYXJzZXIgbGUgZmljaGllciAuZW52LnRlc3RcbiAgICBlbnZDb250ZW50LnNwbGl0KCdcXG4nKS5mb3JFYWNoKGxpbmUgPT4ge1xuICAgICAgY29uc3QgdHJpbW1lZExpbmUgPSBsaW5lLnRyaW0oKTtcbiAgICAgIFxuICAgICAgLy8gSWdub3JlciBsZXMgY29tbWVudGFpcmVzIGV0IGxpZ25lcyB2aWRlc1xuICAgICAgaWYgKHRyaW1tZWRMaW5lICYmICF0cmltbWVkTGluZS5zdGFydHNXaXRoKCcjJykpIHtcbiAgICAgICAgY29uc3QgW2tleSwgLi4udmFsdWVQYXJ0c10gPSB0cmltbWVkTGluZS5zcGxpdCgnPScpO1xuICAgICAgICBpZiAoa2V5ICYmIHZhbHVlUGFydHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVQYXJ0cy5qb2luKCc9JykudHJpbSgpO1xuICAgICAgICAgIHByb2Nlc3MuZW52W2tleS50cmltKCldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygn4pyFIExvYWRlZCB0ZXN0IGVudmlyb25tZW50IHZhcmlhYmxlcyBmcm9tIC5lbnYudGVzdCcpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUud2Fybign4pqg77iPIC5lbnYudGVzdCBmaWxlIG5vdCBmb3VuZCwgdXNpbmcgZGVmYXVsdCB0ZXN0IGVudmlyb25tZW50Jyk7XG4gIH1cbn1cblxuLy8gQ2hhcmdlciBsZXMgdmFyaWFibGVzIGQnZW52aXJvbm5lbWVudCBkZSB0ZXN0XG5sb2FkVGVzdEVudigpO1xuXG4vLyBTJ2Fzc3VyZXIgcXVlIE5PREVfRU5WIGVzdCBkw6lmaW5pXG5pZiAoIXByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xufVxuXG4vLyBDb25maWd1cmF0aW9uIHRpbWV6b25lIHBvdXIgdGVzdHMgZMOpdGVybWluaXN0ZXNcbnByb2Nlc3MuZW52LlRaID0gJ1VUQyc7Il0sInZlcnNpb24iOjN9